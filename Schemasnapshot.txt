-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.actions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  hand_id uuid NOT NULL,
  game_id uuid NOT NULL,
  user_id uuid NOT NULL,
  action_type character varying NOT NULL CHECK (action_type::text = ANY (ARRAY['FOLD'::character varying, 'CHECK'::character varying, 'CALL'::character varying, 'BET'::character varying, 'RAISE'::character varying, 'ALL_IN'::character varying]::text[])),
  amount bigint DEFAULT 0 CHECK (amount >= 0),
  street character varying NOT NULL,
  seat_index integer NOT NULL CHECK (seat_index >= 0 AND seat_index < 10),
  pot_before bigint,
  pot_after bigint,
  created_at timestamp with time zone DEFAULT now(),
  sequence_number integer NOT NULL,
  CONSTRAINT actions_pkey PRIMARY KEY (id),
  CONSTRAINT actions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT actions_hand_id_fkey FOREIGN KEY (hand_id) REFERENCES public.hands(id),
  CONSTRAINT actions_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id)
);
CREATE TABLE public.admin_actions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  admin_user_id uuid NOT NULL,
  action_type character varying NOT NULL,
  target_user_id uuid,
  target_resource_id uuid,
  target_resource_type character varying,
  action_description text NOT NULL,
  action_data jsonb DEFAULT '{}'::jsonb,
  reason text,
  ip_address inet,
  user_agent text,
  session_id character varying,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT admin_actions_pkey PRIMARY KEY (id)
);
CREATE TABLE public.ai_analysis_jobs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  job_type character varying NOT NULL,
  status character varying DEFAULT 'PENDING'::character varying,
  parameters jsonb NOT NULL DEFAULT '{}'::jsonb,
  priority integer DEFAULT 0,
  input_data jsonb DEFAULT '{}'::jsonb,
  input_hand_ids ARRAY,
  input_user_ids ARRAY,
  results jsonb DEFAULT '{}'::jsonb,
  output_data jsonb DEFAULT '{}'::jsonb,
  started_at timestamp with time zone,
  completed_at timestamp with time zone,
  processing_time_seconds integer,
  error_message text,
  retry_count integer DEFAULT 0,
  max_retries integer DEFAULT 3,
  cpu_usage_percent numeric,
  memory_usage_mb integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_analysis_jobs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.ai_model_performance (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  model_name character varying NOT NULL,
  model_version character varying NOT NULL,
  model_type character varying NOT NULL,
  accuracy numeric,
  precision numeric,
  recall numeric,
  f1_score numeric,
  hand_prediction_accuracy numeric,
  behavior_classification_accuracy numeric,
  gto_solution_quality numeric,
  training_samples integer,
  validation_samples integer,
  test_samples integer,
  training_duration_hours numeric,
  hyperparameters jsonb DEFAULT '{}'::jsonb,
  feature_importance jsonb DEFAULT '{}'::jsonb,
  model_size_mb numeric,
  deployed_at timestamp with time zone,
  is_active boolean DEFAULT false,
  performance_threshold numeric,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_model_performance_pkey PRIMARY KEY (id)
);
CREATE TABLE public.announcement_views (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  announcement_id uuid NOT NULL,
  user_id uuid NOT NULL,
  viewed_at timestamp with time zone DEFAULT now(),
  CONSTRAINT announcement_views_pkey PRIMARY KEY (id),
  CONSTRAINT announcement_views_announcement_id_fkey FOREIGN KEY (announcement_id) REFERENCES public.system_announcements(id)
);
CREATE TABLE public.audit_log (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid,
  action character varying NOT NULL,
  resource_type character varying,
  resource_id uuid,
  details jsonb DEFAULT '{}'::jsonb,
  ip_address inet,
  user_agent text,
  success boolean NOT NULL,
  error_message text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT audit_log_pkey PRIMARY KEY (id),
  CONSTRAINT audit_log_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.ban_appeals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  ban_id uuid NOT NULL,
  user_id uuid NOT NULL,
  appeal_reason text NOT NULL,
  appeal_evidence jsonb DEFAULT '{}'::jsonb,
  additional_info text,
  status character varying DEFAULT 'PENDING'::character varying CHECK (status::text = ANY (ARRAY['PENDING'::character varying, 'UNDER_REVIEW'::character varying, 'APPROVED'::character varying, 'DENIED'::character varying, 'WITHDRAWN'::character varying]::text[])),
  reviewed_by uuid,
  review_notes text,
  reviewed_at timestamp with time zone,
  submitted_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ban_appeals_pkey PRIMARY KEY (id),
  CONSTRAINT ban_appeals_ban_id_fkey FOREIGN KEY (ban_id) REFERENCES public.user_bans(id)
);
CREATE TABLE public.chips_pending (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  transaction_type character varying NOT NULL,
  amount bigint NOT NULL,
  room_id uuid,
  status character varying DEFAULT 'PENDING'::character varying CHECK (status::text = ANY (ARRAY['PENDING'::character varying, 'PROCESSING'::character varying, 'COMPLETED'::character varying, 'FAILED'::character varying, 'CANCELLED'::character varying]::text[])),
  error_message text,
  retry_count integer DEFAULT 0,
  expires_at timestamp with time zone NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  processed_at timestamp with time zone,
  CONSTRAINT chips_pending_pkey PRIMARY KEY (id),
  CONSTRAINT chips_pending_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT chips_pending_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms(id)
);
CREATE TABLE public.chips_transactions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  transaction_type character varying NOT NULL CHECK (transaction_type::text = ANY (ARRAY['BUY_IN'::character varying, 'REBUY'::character varying, 'CASHOUT'::character varying, 'WIN'::character varying, 'LOSS'::character varying, 'BLIND'::character varying, 'ANTE'::character varying, 'ADMIN_ADJUST'::character varying, 'BONUS'::character varying, 'RAKEBACK'::character varying, 'TOURNAMENT_ENTRY'::character varying, 'TOURNAMENT_PRIZE'::character varying]::text[])),
  amount bigint NOT NULL,
  balance_before bigint NOT NULL CHECK (balance_before >= 0),
  balance_after bigint NOT NULL CHECK (balance_after >= 0),
  room_id uuid,
  game_id uuid,
  hand_id uuid,
  description text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_by uuid,
  ip_address inet,
  user_agent text,
  processed_at timestamp with time zone DEFAULT now(),
  CONSTRAINT chips_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT chips_transactions_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT chips_transactions_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms(id),
  CONSTRAINT chips_transactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.club_members (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  club_id uuid NOT NULL,
  user_id uuid NOT NULL,
  role character varying DEFAULT 'member'::character varying CHECK (role::text = ANY (ARRAY['member'::character varying, 'moderator'::character varying, 'admin'::character varying, 'owner'::character varying]::text[])),
  joined_at timestamp with time zone DEFAULT now(),
  invited_by uuid,
  CONSTRAINT club_members_pkey PRIMARY KEY (id),
  CONSTRAINT club_members_club_id_fkey FOREIGN KEY (club_id) REFERENCES public.clubs(id)
);
CREATE TABLE public.clubs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  description text,
  is_private boolean DEFAULT false,
  owner_id uuid NOT NULL,
  max_members integer DEFAULT 500,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT clubs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.conversation_members (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  conversation_id uuid NOT NULL,
  user_id uuid NOT NULL,
  joined_at timestamp with time zone DEFAULT now(),
  CONSTRAINT conversation_members_pkey PRIMARY KEY (id),
  CONSTRAINT conversation_members_conversation_id_fkey FOREIGN KEY (conversation_id) REFERENCES public.conversations(id)
);
CREATE TABLE public.conversations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  type character varying NOT NULL CHECK (type::text = ANY (ARRAY['dm'::character varying, 'room'::character varying, 'club'::character varying, 'admin'::character varying]::text[])),
  name character varying,
  is_admin_only boolean DEFAULT false,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT conversations_pkey PRIMARY KEY (id)
);
CREATE TABLE public.domain_events (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  event_type character varying NOT NULL,
  aggregate_type character varying NOT NULL,
  aggregate_id character varying NOT NULL,
  event_data jsonb NOT NULL,
  metadata jsonb DEFAULT '{}'::jsonb,
  version integer NOT NULL DEFAULT 1,
  event_timestamp timestamp with time zone NOT NULL DEFAULT now(),
  sequence_number bigint NOT NULL DEFAULT nextval('domain_events_sequence_number_seq'::regclass),
  causation_id uuid,
  correlation_id uuid,
  user_id uuid,
  processed boolean DEFAULT false,
  processed_at timestamp with time zone,
  processing_errors jsonb,
  CONSTRAINT domain_events_pkey PRIMARY KEY (id)
);
CREATE TABLE public.event_snapshots (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  aggregate_type character varying NOT NULL,
  aggregate_id character varying NOT NULL,
  snapshot_data jsonb NOT NULL,
  version integer NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  event_count integer,
  snapshot_reason character varying,
  CONSTRAINT event_snapshots_pkey PRIMARY KEY (id)
);
CREATE TABLE public.friendships (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  requester_id uuid NOT NULL,
  addressee_id uuid NOT NULL,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'accepted'::character varying, 'blocked'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT friendships_pkey PRIMARY KEY (id)
);
CREATE TABLE public.game_states (
  id text NOT NULL,
  room_id uuid,
  host_user_id text NOT NULL,
  status text NOT NULL CHECK (status = ANY (ARRAY['waiting'::text, 'active'::text, 'paused'::text, 'completed'::text, 'deleted'::text])),
  current_state jsonb NOT NULL,
  hand_number integer NOT NULL DEFAULT 0,
  dealer_position integer,
  total_pot integer NOT NULL DEFAULT 0,
  version integer NOT NULL DEFAULT 1,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT game_states_pkey PRIMARY KEY (id),
  CONSTRAINT game_states_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms(id)
);
CREATE TABLE public.games (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  room_id uuid NOT NULL,
  game_type character varying NOT NULL DEFAULT 'TEXAS_HOLDEM'::character varying,
  small_blind integer NOT NULL,
  big_blind integer NOT NULL,
  ante integer DEFAULT 0,
  status character varying DEFAULT 'WAITING'::character varying CHECK (status::text = ANY (ARRAY['WAITING'::character varying, 'ACTIVE'::character varying, 'PAUSED'::character varying, 'COMPLETED'::character varying, 'CANCELLED'::character varying]::text[])),
  current_hand_id uuid,
  dealer_seat integer CHECK (dealer_seat >= 0 AND dealer_seat < 10),
  shuffle_seed character varying,
  entropy_source text,
  started_at timestamp with time zone,
  ended_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT games_pkey PRIMARY KEY (id),
  CONSTRAINT games_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms(id)
);
CREATE TABLE public.gto_solutions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  game_type character varying NOT NULL DEFAULT 'TEXAS_HOLDEM'::character varying,
  position character varying NOT NULL,
  stack_depth numeric NOT NULL,
  pot_size numeric NOT NULL,
  bet_size numeric NOT NULL,
  hole_cards_hash character varying NOT NULL,
  community_cards_hash character varying NOT NULL,
  street character varying NOT NULL,
  optimal_action character varying NOT NULL,
  optimal_frequency numeric NOT NULL,
  optimal_bet_size numeric,
  alternative_actions jsonb DEFAULT '{}'::jsonb,
  solver_type character varying NOT NULL,
  solver_version character varying NOT NULL,
  computation_time_seconds integer,
  iterations integer,
  convergence_threshold numeric,
  exploitability numeric,
  created_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  access_count integer DEFAULT 0,
  last_accessed_at timestamp with time zone,
  CONSTRAINT gto_solutions_pkey PRIMARY KEY (id)
);
CREATE TABLE public.hand_embeddings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  hand_fingerprint_id uuid NOT NULL,
  embedding USER-DEFINED,
  embedding_model character varying NOT NULL,
  embedding_version character varying NOT NULL,
  embedding_dimensions integer DEFAULT 1536,
  context_window_size integer DEFAULT 100,
  context_hand_ids ARRAY,
  confidence_score numeric,
  similarity_threshold numeric,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT hand_embeddings_pkey PRIMARY KEY (id),
  CONSTRAINT hand_embeddings_hand_fingerprint_id_fkey FOREIGN KEY (hand_fingerprint_id) REFERENCES public.hand_fingerprints(id)
);
CREATE TABLE public.hand_fingerprints (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  hand_id uuid,
  game_id character varying NOT NULL,
  hole_cards_hash character varying NOT NULL,
  community_cards_hash character varying NOT NULL,
  position character varying NOT NULL,
  stack_to_pot_ratio numeric,
  pot_odds numeric,
  preflop_actions text,
  flop_actions text,
  turn_actions text,
  river_actions text,
  action_sequence_hash character varying NOT NULL,
  hand_strength_category character varying,
  equity_vs_range numeric,
  fold_equity numeric,
  is_bluff boolean DEFAULT false,
  is_value_bet boolean DEFAULT false,
  is_semi_bluff boolean DEFAULT false,
  aggression_level integer DEFAULT 0,
  final_outcome character varying,
  showdown_reached boolean DEFAULT false,
  pot_winnings bigint DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  analyzed_at timestamp with time zone,
  CONSTRAINT hand_fingerprints_pkey PRIMARY KEY (id)
);
CREATE TABLE public.hand_history (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  game_id character varying,
  room_id uuid,
  hand_number integer,
  pot_size bigint,
  community_cards ARRAY,
  winners jsonb,
  player_actions jsonb,
  final_stacks jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT hand_history_pkey PRIMARY KEY (id),
  CONSTRAINT hand_history_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms(id)
);
CREATE TABLE public.hands (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  game_id uuid NOT NULL,
  hand_number integer NOT NULL,
  dealer_seat integer NOT NULL CHECK (dealer_seat >= 0 AND dealer_seat < 10),
  small_blind_seat integer CHECK (small_blind_seat >= 0 AND small_blind_seat < 10),
  big_blind_seat integer CHECK (big_blind_seat >= 0 AND big_blind_seat < 10),
  status character varying DEFAULT 'ACTIVE'::character varying CHECK (status::text = ANY (ARRAY['ACTIVE'::character varying, 'COMPLETED'::character varying, 'CANCELLED'::character varying]::text[])),
  current_street character varying DEFAULT 'PREFLOP'::character varying CHECK (current_street::text = ANY (ARRAY['PREFLOP'::character varying, 'FLOP'::character varying, 'TURN'::character varying, 'RIVER'::character varying, 'SHOWDOWN'::character varying]::text[])),
  pot_total bigint DEFAULT 0 CHECK (pot_total >= 0),
  community_cards jsonb DEFAULT '[]'::jsonb,
  deck_state jsonb,
  started_at timestamp with time zone DEFAULT now(),
  ended_at timestamp with time zone,
  CONSTRAINT hands_pkey PRIMARY KEY (id),
  CONSTRAINT hands_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id)
);
CREATE TABLE public.message_flags (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  message_id uuid NOT NULL,
  flagged_by uuid NOT NULL,
  flag_reason character varying NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT message_flags_pkey PRIMARY KEY (id),
  CONSTRAINT message_flags_message_id_fkey FOREIGN KEY (message_id) REFERENCES public.messages(id)
);
CREATE TABLE public.message_reads (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  message_id uuid NOT NULL,
  user_id uuid NOT NULL,
  read_at timestamp with time zone DEFAULT now(),
  CONSTRAINT message_reads_pkey PRIMARY KEY (id),
  CONSTRAINT message_reads_message_id_fkey FOREIGN KEY (message_id) REFERENCES public.messages(id)
);
CREATE TABLE public.messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  conversation_id uuid NOT NULL,
  user_id uuid NOT NULL,
  body text NOT NULL,
  meta jsonb,
  is_deleted boolean DEFAULT false,
  deleted_by uuid,
  deleted_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT messages_pkey PRIMARY KEY (id),
  CONSTRAINT messages_conversation_id_fkey FOREIGN KEY (conversation_id) REFERENCES public.conversations(id)
);
CREATE TABLE public.moderation_queue (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  queue_type character varying NOT NULL CHECK (queue_type::text = ANY (ARRAY['REPORT_REVIEW'::character varying, 'APPEAL_REVIEW'::character varying, 'CONTENT_MODERATION'::character varying, 'USER_INVESTIGATION'::character varying]::text[])),
  priority integer DEFAULT 0,
  task_description text NOT NULL,
  task_data jsonb NOT NULL,
  related_user_id uuid,
  related_resource_id uuid,
  related_resource_type character varying,
  assigned_to uuid,
  assigned_at timestamp with time zone,
  estimated_completion_minutes integer,
  status character varying DEFAULT 'PENDING'::character varying CHECK (status::text = ANY (ARRAY['PENDING'::character varying, 'ASSIGNED'::character varying, 'IN_PROGRESS'::character varying, 'COMPLETED'::character varying, 'CANCELLED'::character varying]::text[])),
  completed_at timestamp with time zone,
  completed_by uuid,
  completion_notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT moderation_queue_pkey PRIMARY KEY (id)
);
CREATE TABLE public.player_achievements (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  achievement_type character varying NOT NULL,
  achievement_name character varying NOT NULL,
  achievement_description text,
  achievement_data jsonb DEFAULT '{}'::jsonb,
  earned_at timestamp with time zone DEFAULT now(),
  is_hidden boolean DEFAULT false,
  CONSTRAINT player_achievements_pkey PRIMARY KEY (id)
);
CREATE TABLE public.player_aliases (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  game_id character varying NOT NULL,
  user_id uuid NOT NULL,
  alias character varying NOT NULL CHECK (length(alias::text) >= 1 AND length(alias::text) <= 32),
  is_admin_override boolean DEFAULT false,
  set_by_user_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_aliases_pkey PRIMARY KEY (id)
);
CREATE TABLE public.player_behavior_patterns (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  pattern_type character varying NOT NULL,
  pattern_confidence numeric NOT NULL,
  pattern_strength numeric NOT NULL,
  vpip_range numeric NOT NULL,
  pfr_range numeric NOT NULL,
  aggression_range numeric NOT NULL,
  position_preferences jsonb DEFAULT '{}'::jsonb,
  bluff_frequency numeric,
  value_bet_frequency numeric,
  fold_frequency numeric,
  call_frequency numeric,
  time_of_day_preferences jsonb DEFAULT '{}'::jsonb,
  session_length_patterns jsonb DEFAULT '{}'::jsonb,
  tilt_indicators jsonb DEFAULT '{}'::jsonb,
  pattern_emerged_at timestamp with time zone,
  pattern_stable_since timestamp with time zone,
  pattern_confidence_history jsonb DEFAULT '[]'::jsonb,
  analysis_model character varying NOT NULL,
  analysis_version character varying NOT NULL,
  sample_size integer NOT NULL,
  analysis_period_days integer NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_behavior_patterns_pkey PRIMARY KEY (id)
);
CREATE TABLE public.player_game_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  game_id character varying NOT NULL,
  room_id uuid,
  seat_index integer NOT NULL,
  buy_in_amount bigint NOT NULL DEFAULT 0,
  cash_out_amount bigint DEFAULT 0,
  net_result bigint DEFAULT (cash_out_amount - buy_in_amount),
  joined_at timestamp with time zone DEFAULT now(),
  left_at timestamp with time zone,
  duration_minutes integer DEFAULT 
CASE
    WHEN (left_at IS NOT NULL) THEN (EXTRACT(epoch FROM (left_at - joined_at)) / (60)::numeric)
    ELSE NULL::numeric
END,
  hands_played integer DEFAULT 0,
  hands_won integer DEFAULT 0,
  vpip_percentage numeric,
  pfr_percentage numeric,
  aggression_factor numeric,
  final_status character varying DEFAULT 'ACTIVE'::character varying CHECK (final_status::text = ANY (ARRAY['ACTIVE'::character varying, 'SITTING_OUT'::character varying, 'FOLDED'::character varying, 'ALL_IN'::character varying, 'OUT'::character varying, 'CASHED_OUT'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_game_history_pkey PRIMARY KEY (id)
);
CREATE TABLE public.player_hand_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  game_id character varying NOT NULL,
  hand_id uuid,
  room_id uuid,
  hand_number integer NOT NULL,
  seat_index integer NOT NULL,
  position character varying,
  hole_cards jsonb DEFAULT '[]'::jsonb,
  final_hand_rank integer,
  final_hand_description character varying,
  preflop_action character varying,
  flop_action character varying,
  turn_action character varying,
  river_action character varying,
  showdown_action character varying,
  preflop_bet bigint DEFAULT 0,
  flop_bet bigint DEFAULT 0,
  turn_bet bigint DEFAULT 0,
  river_bet bigint DEFAULT 0,
  total_bet bigint DEFAULT (((preflop_bet + flop_bet) + turn_bet) + river_bet),
  pot_contribution bigint DEFAULT 0,
  pot_winnings bigint DEFAULT 0,
  net_hand_result bigint DEFAULT (pot_winnings - pot_contribution),
  hand_outcome character varying,
  is_showdown boolean DEFAULT false,
  is_all_in boolean DEFAULT false,
  hand_started_at timestamp with time zone DEFAULT now(),
  hand_ended_at timestamp with time zone,
  hand_duration_seconds integer DEFAULT 
CASE
    WHEN (hand_ended_at IS NOT NULL) THEN EXTRACT(epoch FROM (hand_ended_at - hand_started_at))
    ELSE NULL::numeric
END,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_hand_history_pkey PRIMARY KEY (id)
);
CREATE TABLE public.player_notes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  author_user_id uuid NOT NULL,
  subject_user_id uuid NOT NULL,
  note_text text NOT NULL,
  is_private boolean DEFAULT true,
  tags ARRAY DEFAULT '{}'::text[],
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_notes_pkey PRIMARY KEY (id)
);
CREATE TABLE public.player_statistics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  total_games_played integer DEFAULT 0,
  total_hands_played integer DEFAULT 0,
  total_hands_won integer DEFAULT 0,
  total_buy_ins bigint DEFAULT 0,
  total_cash_outs bigint DEFAULT 0,
  total_profit_loss bigint DEFAULT (total_cash_outs - total_buy_ins),
  game_win_rate numeric DEFAULT 0.00,
  hand_win_rate numeric DEFAULT 0.00,
  showdown_win_rate numeric DEFAULT 0.00,
  vpip_percentage numeric DEFAULT 0.00,
  pfr_percentage numeric DEFAULT 0.00,
  aggression_factor numeric DEFAULT 0.00,
  cbet_percentage numeric DEFAULT 0.00,
  fold_to_cbet_percentage numeric DEFAULT 0.00,
  vpip_early_position numeric DEFAULT 0.00,
  vpip_middle_position numeric DEFAULT 0.00,
  vpip_late_position numeric DEFAULT 0.00,
  vpip_blinds numeric DEFAULT 0.00,
  total_play_time_minutes integer DEFAULT 0,
  average_session_length_minutes numeric DEFAULT 0.00,
  longest_session_minutes integer DEFAULT 0,
  current_win_streak integer DEFAULT 0,
  current_loss_streak integer DEFAULT 0,
  longest_win_streak integer DEFAULT 0,
  longest_loss_streak integer DEFAULT 0,
  recent_games_played integer DEFAULT 0,
  recent_hands_played integer DEFAULT 0,
  recent_profit_loss bigint DEFAULT 0,
  recent_win_rate numeric DEFAULT 0.00,
  last_game_played_at timestamp with time zone,
  last_hand_played_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_statistics_pkey PRIMARY KEY (id)
);
CREATE TABLE public.players (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  game_id uuid NOT NULL,
  user_id uuid NOT NULL,
  seat_index integer NOT NULL CHECK (seat_index >= 0 AND seat_index < 10),
  stack bigint NOT NULL CHECK (stack >= 0),
  status character varying DEFAULT 'ACTIVE'::character varying CHECK (status::text = ANY (ARRAY['ACTIVE'::character varying, 'SITTING_OUT'::character varying, 'FOLDED'::character varying, 'ALL_IN'::character varying, 'OUT'::character varying]::text[])),
  hole_cards jsonb DEFAULT '[]'::jsonb,
  joined_at timestamp with time zone DEFAULT now(),
  CONSTRAINT players_pkey PRIMARY KEY (id),
  CONSTRAINT players_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT players_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id)
);
CREATE TABLE public.pots (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  hand_id uuid NOT NULL,
  pot_type character varying NOT NULL CHECK (pot_type::text = ANY (ARRAY['MAIN'::character varying, 'SIDE'::character varying]::text[])),
  amount bigint NOT NULL CHECK (amount >= 0),
  eligible_players jsonb DEFAULT '[]'::jsonb,
  winner_ids jsonb DEFAULT '[]'::jsonb,
  distributed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT pots_pkey PRIMARY KEY (id),
  CONSTRAINT pots_hand_id_fkey FOREIGN KEY (hand_id) REFERENCES public.hands(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  username character varying NOT NULL UNIQUE,
  display_name character varying,
  avatar_url text,
  total_chips bigint DEFAULT 1000,
  total_games_played integer DEFAULT 0,
  total_winnings bigint DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  default_buy_in bigint DEFAULT 1000,
  auto_muck boolean DEFAULT false,
  show_advanced_stats boolean DEFAULT false,
  theme_preference text DEFAULT 'dark'::text,
  bio text,
  location text,
  show_online_status boolean DEFAULT true,
  allow_friend_requests boolean DEFAULT true,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.rejoin_tokens (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  game_id uuid NOT NULL,
  room_id uuid NOT NULL,
  seat_index integer NOT NULL CHECK (seat_index >= 0 AND seat_index < 10),
  token_hash character varying NOT NULL UNIQUE,
  expires_at timestamp with time zone NOT NULL,
  used_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT rejoin_tokens_pkey PRIMARY KEY (id),
  CONSTRAINT rejoin_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.role_permissions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  role character varying NOT NULL,
  permission character varying NOT NULL,
  resource character varying,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT role_permissions_pkey PRIMARY KEY (id)
);
CREATE TABLE public.room_players (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  room_id uuid NOT NULL,
  user_id uuid NOT NULL,
  status character varying DEFAULT 'PENDING'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'approved'::character varying, 'rejected'::character varying, 'left'::character varying, 'PENDING'::character varying, 'APPROVED'::character varying, 'REJECTED'::character varying, 'LEFT'::character varying]::text[])),
  joined_at timestamp with time zone DEFAULT now(),
  approved_at timestamp with time zone,
  approved_by uuid,
  CONSTRAINT room_players_pkey PRIMARY KEY (id),
  CONSTRAINT room_players_approved_by_fkey FOREIGN KEY (approved_by) REFERENCES auth.users(id),
  CONSTRAINT room_players_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms(id)
);
CREATE TABLE public.room_seats (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  room_id uuid NOT NULL,
  user_id uuid NOT NULL,
  seat_index integer NOT NULL CHECK (seat_index >= 0 AND seat_index < 10),
  status character varying DEFAULT 'SEATED'::character varying CHECK (status::text = ANY (ARRAY['SEATED'::character varying, 'PLAYING'::character varying, 'SITTING_OUT'::character varying, 'WAITLIST'::character varying]::text[])),
  chips_in_play bigint DEFAULT 0 CHECK (chips_in_play >= 0),
  joined_at timestamp with time zone DEFAULT now(),
  last_action_at timestamp with time zone DEFAULT now(),
  left_at timestamp with time zone,
  CONSTRAINT room_seats_pkey PRIMARY KEY (id),
  CONSTRAINT room_seats_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms(id)
);
CREATE TABLE public.room_spectators (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  room_id uuid NOT NULL,
  user_id uuid NOT NULL,
  joined_at timestamp with time zone DEFAULT now(),
  left_at timestamp with time zone,
  CONSTRAINT room_spectators_pkey PRIMARY KEY (id),
  CONSTRAINT room_spectators_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms(id)
);
CREATE TABLE public.rooms (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name character varying NOT NULL CHECK (length(name::text) >= 3),
  description text,
  owner_id uuid,
  is_private boolean DEFAULT false,
  invite_code character varying UNIQUE,
  password_hash character varying,
  game_type character varying DEFAULT 'TEXAS_HOLDEM'::character varying CHECK (game_type::text = ANY (ARRAY['TEXAS_HOLDEM'::character varying, 'OMAHA'::character varying, 'SEVEN_CARD_STUD'::character varying]::text[])),
  small_blind integer NOT NULL CHECK (small_blind > 0),
  big_blind integer NOT NULL,
  ante integer DEFAULT 0 CHECK (ante >= 0),
  max_players integer DEFAULT 6 CHECK (max_players >= 2 AND max_players <= 10),
  min_players integer DEFAULT 2 CHECK (min_players >= 2),
  min_buy_in integer NOT NULL CHECK (min_buy_in > 0),
  max_buy_in integer NOT NULL,
  turn_time_limit integer DEFAULT 30 CHECK (turn_time_limit > 0),
  timebank_seconds integer DEFAULT 60 CHECK (timebank_seconds >= 0),
  auto_muck_losing_hands boolean DEFAULT true,
  allow_rabbit_hunting boolean DEFAULT false,
  allow_spectators boolean DEFAULT true,
  status character varying DEFAULT 'WAITING'::character varying CHECK (status::text = ANY (ARRAY['WAITING'::character varying, 'ACTIVE'::character varying, 'PAUSED'::character varying, 'CLOSED'::character varying]::text[])),
  current_game_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  closed_at timestamp with time zone,
  host_user_id uuid,
  lobby_status character varying DEFAULT 'lobby'::character varying,
  game_id character varying,
  CONSTRAINT rooms_pkey PRIMARY KEY (id),
  CONSTRAINT rooms_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES auth.users(id)
);
CREATE TABLE public.system_announcements (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title character varying NOT NULL,
  content text NOT NULL,
  announcement_type character varying DEFAULT 'INFO'::character varying CHECK (announcement_type::text = ANY (ARRAY['INFO'::character varying, 'WARNING'::character varying, 'MAINTENANCE'::character varying, 'FEATURE_UPDATE'::character varying]::text[])),
  priority character varying DEFAULT 'NORMAL'::character varying CHECK (priority::text = ANY (ARRAY['LOW'::character varying, 'NORMAL'::character varying, 'HIGH'::character varying, 'URGENT'::character varying]::text[])),
  target_audience character varying DEFAULT 'ALL'::character varying CHECK (target_audience::text = ANY (ARRAY['ALL'::character varying, 'AUTHENTICATED'::character varying, 'GUESTS'::character varying, 'ADMINS'::character varying]::text[])),
  target_roles ARRAY DEFAULT '{}'::text[],
  target_user_ids ARRAY DEFAULT '{}'::uuid[],
  is_active boolean DEFAULT true,
  show_on_login boolean DEFAULT false,
  show_in_game boolean DEFAULT true,
  show_in_lobby boolean DEFAULT true,
  published_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  created_by uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT system_announcements_pkey PRIMARY KEY (id)
);
CREATE TABLE public.system_settings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  setting_key character varying NOT NULL UNIQUE,
  setting_value text NOT NULL,
  setting_type character varying DEFAULT 'STRING'::character varying CHECK (setting_type::text = ANY (ARRAY['STRING'::character varying, 'INTEGER'::character varying, 'BOOLEAN'::character varying, 'JSON'::character varying, 'DECIMAL'::character varying]::text[])),
  description text,
  category character varying DEFAULT 'GENERAL'::character varying,
  validation_regex character varying,
  min_value numeric,
  max_value numeric,
  allowed_values ARRAY,
  requires_admin boolean DEFAULT false,
  requires_god boolean DEFAULT false,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_by uuid,
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT system_settings_pkey PRIMARY KEY (id)
);
CREATE TABLE public.table_stakes (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  room_id uuid NOT NULL,
  amount bigint NOT NULL CHECK (amount >= 0),
  locked_at timestamp with time zone DEFAULT now(),
  unlocked_at timestamp with time zone,
  CONSTRAINT table_stakes_pkey PRIMARY KEY (id),
  CONSTRAINT table_stakes_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT table_stakes_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms(id)
);
CREATE TABLE public.user_bans (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  ban_type character varying NOT NULL CHECK (ban_type::text = ANY (ARRAY['TEMPORARY'::character varying, 'PERMANENT'::character varying, 'IP'::character varying, 'HARDWARE'::character varying]::text[])),
  ban_reason character varying NOT NULL,
  ban_details text,
  ban_scope character varying DEFAULT 'FULL'::character varying CHECK (ban_scope::text = ANY (ARRAY['FULL'::character varying, 'CHAT_ONLY'::character varying, 'GAME_ONLY'::character varying, 'ROOM_CREATION'::character varying]::text[])),
  affected_services ARRAY DEFAULT '{}'::text[],
  banned_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  is_active boolean DEFAULT true,
  banned_by uuid NOT NULL,
  ban_duration_hours integer,
  can_appeal boolean DEFAULT true,
  appeal_deadline timestamp with time zone,
  appeal_count integer DEFAULT 0,
  last_appeal_at timestamp with time zone,
  unbanned_at timestamp with time zone,
  unbanned_by uuid,
  unban_reason text,
  CONSTRAINT user_bans_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_blocks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  blocker_user_id uuid NOT NULL,
  blocked_user_id uuid NOT NULL,
  block_type character varying DEFAULT 'USER'::character varying CHECK (block_type::text = ANY (ARRAY['USER'::character varying, 'MESSAGE'::character varying, 'GAME_INVITE'::character varying]::text[])),
  reason character varying,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  CONSTRAINT user_blocks_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_profiles (
  id uuid NOT NULL,
  username character varying NOT NULL UNIQUE,
  display_name character varying,
  avatar_url text,
  bio text,
  location character varying,
  website text,
  total_games_played integer DEFAULT 0,
  total_winnings bigint DEFAULT 0,
  best_hand text,
  favorite_position character varying,
  auto_rebuy boolean DEFAULT false,
  auto_show_cards boolean DEFAULT true,
  sound_enabled boolean DEFAULT true,
  animations_enabled boolean DEFAULT true,
  show_online_status boolean DEFAULT true,
  allow_friend_requests boolean DEFAULT true,
  show_game_history boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  chips bigint DEFAULT 1000,
  is_online boolean DEFAULT false,
  last_seen timestamp with time zone DEFAULT now(),
  global_username character varying CHECK (global_username IS NULL OR length(global_username::text) >= 3 AND length(global_username::text) <= 50),
  user_role character varying DEFAULT 'user'::character varying CHECK (user_role::text = ANY (ARRAY['user'::character varying, 'admin'::character varying, 'god'::character varying]::text[])),
  username_changed_at timestamp with time zone,
  username_change_count integer DEFAULT 0,
  max_username_changes integer DEFAULT 3,
  CONSTRAINT user_profiles_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_reports (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  reporter_user_id uuid NOT NULL,
  reported_user_id uuid NOT NULL,
  report_type character varying NOT NULL CHECK (report_type::text = ANY (ARRAY['HARASSMENT'::character varying, 'CHEATING'::character varying, 'ABUSIVE_LANGUAGE'::character varying, 'SPAM'::character varying, 'INAPPROPRIATE_CONTENT'::character varying, 'REAL_MONEY_GAMBLING'::character varying, 'UNDERAGE'::character varying, 'IMPERSONATION'::character varying, 'SCAMMING'::character varying, 'OTHER'::character varying]::text[])),
  report_category character varying DEFAULT 'BEHAVIOR'::character varying CHECK (report_category::text = ANY (ARRAY['BEHAVIOR'::character varying, 'CONTENT'::character varying, 'TECHNICAL'::character varying, 'OTHER'::character varying]::text[])),
  description text NOT NULL,
  evidence_data jsonb DEFAULT '{}'::jsonb,
  game_context jsonb DEFAULT '{}'::jsonb,
  chat_context jsonb DEFAULT '{}'::jsonb,
  status character varying DEFAULT 'PENDING'::character varying CHECK (status::text = ANY (ARRAY['PENDING'::character varying, 'INVESTIGATING'::character varying, 'RESOLVED'::character varying, 'DISMISSED'::character varying, 'ESCALATED'::character varying]::text[])),
  priority character varying DEFAULT 'MEDIUM'::character varying CHECK (priority::text = ANY (ARRAY['LOW'::character varying, 'MEDIUM'::character varying, 'HIGH'::character varying, 'CRITICAL'::character varying]::text[])),
  assigned_moderator_id uuid,
  moderator_notes text,
  action_taken character varying,
  action_details jsonb DEFAULT '{}'::jsonb,
  action_taken_at timestamp with time zone,
  resolution_notes text,
  resolved_at timestamp with time zone,
  resolved_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_reports_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_sessions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  refresh_token_hash character varying NOT NULL,
  device_info jsonb DEFAULT '{}'::jsonb,
  ip_address inet,
  user_agent text,
  expires_at timestamp with time zone NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  last_used timestamp with time zone DEFAULT now(),
  is_revoked boolean DEFAULT false,
  CONSTRAINT user_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT user_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_warnings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  warning_type character varying NOT NULL CHECK (warning_type::text = ANY (ARRAY['BEHAVIOR'::character varying, 'LANGUAGE'::character varying, 'CHEATING'::character varying, 'SPAM'::character varying, 'HARASSMENT'::character varying, 'OTHER'::character varying]::text[])),
  warning_level integer DEFAULT 1 CHECK (warning_level >= 1 AND warning_level <= 5),
  description text NOT NULL,
  details jsonb DEFAULT '{}'::jsonb,
  issued_by uuid NOT NULL,
  issued_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  acknowledged_at timestamp with time zone,
  acknowledged_by uuid,
  escalated_to_ban boolean DEFAULT false,
  escalated_at timestamp with time zone,
  escalated_by uuid,
  CONSTRAINT user_warnings_pkey PRIMARY KEY (id)
);
CREATE TABLE public.username_changes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  old_username character varying,
  new_username character varying NOT NULL,
  changed_at timestamp with time zone DEFAULT now(),
  ip_address inet,
  user_agent text,
  CONSTRAINT username_changes_pkey PRIMARY KEY (id)
);